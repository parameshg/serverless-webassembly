@page "/weather"
@inject HttpClient Http
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<PageTitle>Weather</PageTitle>
<h1>Weather Forecast</h1>
<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" 
                    PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@forecasts"
                    TItem="WeatherForecast" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temperature (C)" Width="160px" />
            <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" Width="200px" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("data/weather.json");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
